---
name: Build and Deploy Lambda API (Python Runtime)

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger_build]
  push:
    branches:
      - '0.3.0'
      - stage
      - main
    paths:
      - 'lambda/api/python/**'
      - '.github/workflows/lambda_api_python.yml'
      - '.github/scripts/build-api-python.sh'
jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'refs/heads/main' && 'prod' || ( github.ref_name == 'refs/heads/stage' && 'stage' || 'development' ) }}
    steps:
    - name: checkout
      uses: actions/checkout@main
    - name: pylint
      shell: bash
      run: pip install pylint && cd ./lambda/api/python && pylint --rcfile .pylintrc */function.py
    - name: configure-aws
      run: |
        aws configure --profile deploy_lambda <<-EOF > /dev/null 2>&1
        ${{ secrets.AWS_ACCESS_KEY_ID }}
        ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ${{ secrets.AWS_REGION }}
        json
        EOF
    - name: build
      run: ./.github/scripts/build-api-python.sh
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'refs/heads/main' && 'prod' || ( github.ref_name == 'refs/heads/stage' && 'stage' || 'development' ) }}
    needs: build
    env:
      TF_API_TOKEN: ${{ secrets.TF_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
    - name: checkout
      uses: actions/checkout@main
    - name: install-terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
    - name: tfvars-terraform
      run: |
        cd ./terraform/infra
        echo "smtpout_scale = ${{ vars.TF_VAR_SMTPOUT_SCALE }}" > terraform.tfvars
        echo "availability_zones = ${{ vars.TF_VAR_AVAILABILITY_ZONES}}" >> terraform.tfvars
        echo "aws_region = \"${{ vars.TF_VAR_AWS_REGION}}\"" >> terraform.tfvars
        echo "cidr_block = \"${{ vars.TF_VAR_CIDR_BLOCK}}\"" >> terraform.tfvars
        echo "control_domain = \"${{ vars.TF_VAR_CONTROL_DOMAIN}}\"" >> terraform.tfvars
        echo "email = \"${{ vars.TF_VAR_EMAIL }}\"" >> terraform.tfvars
        echo "environment = \"${{ vars.TF_VAR_ENVIRONMENT }}\"" >> terraform.tfvars
        echo "imap_scale = ${{ vars.TF_VAR_IMAP_SCALE }}" >> terraform.tfvars
        echo "mail_domains = ${{ vars.TF_VAR_MAIL_DOMAINS }}" >> terraform.tfvars
        echo "smtpin_scale = ${{ vars.TF_VAR_SMTPIN_SCALE }}" >> terraform.tfvars
        echo "chef_license = \"${{ vars.TF_VAR_CHEF_LICENSE}}\"" >> terraform.tfvars
        echo "repo = \"${{ vars.TF_VAR_REPO }}\"" >> terraform.tfvars
    - name: init-terraform
      run: cd ./terraform/infra && terraform init
    - name: taint-layer-terraform
      run: cd ./terraform/infra && terraform taint module.lambda_layers.aws_lambda_layer_version.layer[\"python\"]
    - name: apply-layer-terraform
      run: cd ./terraform/infra && terraform apply -no-color -auto-approve -target=module.lambda_layers.aws_lambda_layer_version.layer[\"python\"]
    - name: taint-terraform
      run: |
        cd ./lambda/api/python && for FUNC in * ; do
          if [ "$FUNC" != "python" ] ; then # skip layer
            pushd ../../../terraform/infra
            terraform taint module.admin.module.cabal_method[\"$FUNC\"].aws_lambda_function.api_call
            popd
          fi
        done
    - name: apply-terraform
      run: |
        cd ./lambda/api/python && for FUNC in * ; do
          if [ "$FUNC" != "python" ] ; then # skip layer
            pushd ../../../terraform/infra
            terraform apply -no-color -auto-approve -target=module.admin.module.cabal_method[\"$FUNC\"].aws_lambda_function.api_call
            popd
          fi
        done
