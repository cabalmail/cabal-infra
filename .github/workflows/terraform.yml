---
name: Build and Deploy Terraform Infrastructure

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger_build_dev]
  push:
    branches:
      - '0.3.0'
      - main
      - stage
    paths:
      - 'terraform/infra'
      - 'terraform/infra/*'
      - 'terraform/infra/*/**'
      - '.github/workflows/terraform.yml'
jobs:
  checkov:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@master@v2
    - name: chekov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/infra/
        quiet: true
        soft_fail: false
        framework: terraform
        download_external_modules: false
  tflint:
    defaults:
      run:
        working-directory: ./terraform/infra
        runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: install-linters
      run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
    - name: initialize-linter
      run: tflint --version && tflint --init
    - name: run-linter
      run: for i in ./ modules/* modules/*/modules/* ; do tflint ; done
  tfsec:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@master@v2
    - name: tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: false
        working_directory: ./terraform/infra
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/infra
    environment: ${{ github.ref_name == 'refs/heads/main' && 'prod' || ( github.ref_name == 'refs/heads/stage' && 'stage' || 'development' ) }}
    needs:
    - checkov
    - tflint
    - tfsec
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: install-terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
    - name: init-terraform
      run: terraform init -backend-config="token=${{ secrets.TF_TOKEN }}" -backend-config="organization=${{ vars.TF_ORG }}" -backend-config="workspaces=[${{ vars.TF_WORKSPACE }}]"
    - name: plan-terraform
      run: cd terraform/infra && terraform plan -no-color
    - run: echo ${{ steps.plan-terraform.outputs.stdout }}
    - run: echo ${{ steps.plan-terraform.outputs.stderr }}
    - run: echo ${{ steps.plan-terraform.outputs.exitcode }}