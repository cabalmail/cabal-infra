---
name: Build and Deploy Terraform Infrastructure

on:
  workflow_dispatch:
  workflow_call:
  repository_dispatch:
    types: [trigger_build]
  push:
    branches:
      - '0.3.0'
      - main
      - stage
    paths:
      - 'terraform/infra'
      - 'terraform/infra/*'
      - 'terraform/infra/*/**'
      - '.github/workflows/terraform.yml'
      - '.github/scripts/make-terraform.sh'

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || ( github.ref_name == 'stage' && 'stage' || 'development' ) }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: generate-versions
      run: env TF_ENVIRONMENT="${{ vars.TF_VAR_ENVIRONMENT }}" ./.github/scripts/make-terraform.sh
    - name: debug-1
      run: cat ./terraform/infra/versions.tf
    - name: debug-2
      run: echo "${{ vars.TF_VAR_ENVIRONMENT }}"
    - name: store-artifact
      uses: actions/upload-artifact@v3
      with:
        name: versions.tf
        path: ./terraform/infra/versions.tf
  chekov:
    runs-on: ubuntu-latest
    needs:
    - build
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: retrieve-artifact
      uses: actions/download-artifact@v3
      with:
        name: versions.tf
    - name: move
      run: mv versions.tf ./terraform/infra/versions.tf
    - name: chekov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform/infra/
        quiet: true
        soft_fail: true
        framework: terraform
        download_external_modules: false
  tflint:
    runs-on: ubuntu-latest
    needs:
    - build
    defaults:
      run:
        working-directory: ./terraform/infra
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: retrieve-artifact
      uses: actions/download-artifact@v3
      with:
        name: versions.tf
    - name: move
      run: mv ../../versions.tf versions.tf
    - name: install-linters
      run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
    - name: initialize-linter
      run: tflint --version && tflint --init
    - name: run-linter
      run: for i in ./ modules/* modules/*/modules/* ; do tflint ; done
  tfsec:
    runs-on: ubuntu-latest
    needs:
    - build
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: retrieve-artifact
      uses: actions/download-artifact@v3
      with:
        name: versions.tf
    - name: move
      run: mv versions.tf ./terraform/infra/versions.tf
    - name: tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: false
        working_directory: ./terraform/infra
  plan:
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.plan-terraform.outputs.exit_code }}
    defaults:
      run:
        working-directory: ./terraform/infra
    environment: ${{ github.ref_name == 'main' && 'prod' || ( github.ref_name == 'stage' && 'stage' || 'development' ) }}
    needs:
    - chekov
    - tflint
    - tfsec
    env:
      TF_API_TOKEN: ${{ secrets.TF_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: retrieve-artifact
      uses: actions/download-artifact@v3
      with:
        name: versions.tf
    - name: move
      run: mv ../../versions.tf versions.tf
    - name: install-terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
    - name: tfvars-terraform
      run: |
        echo "smtpout_scale = ${{ vars.TF_VAR_SMTPOUT_SCALE }}" > terraform.tfvars
        echo "availability_zones = ${{ vars.TF_VAR_AVAILABILITY_ZONES}}" >> terraform.tfvars
        echo "aws_region = \"${{ vars.TF_VAR_AWS_REGION}}\"" >> terraform.tfvars
        echo "cidr_block = \"${{ vars.TF_VAR_CIDR_BLOCK}}\"" >> terraform.tfvars
        echo "control_domain = \"${{ vars.TF_VAR_CONTROL_DOMAIN}}\"" >> terraform.tfvars
        echo "email = \"${{ vars.TF_VAR_EMAIL }}\"" >> terraform.tfvars
        echo "environment = \"${{ vars.TF_VAR_ENVIRONMENT }}\"" >> terraform.tfvars
        echo "imap_scale = ${{ vars.TF_VAR_IMAP_SCALE }}" >> terraform.tfvars
        echo "mail_domains = ${{ vars.TF_VAR_MAIL_DOMAINS }}" >> terraform.tfvars
        echo "smtpin_scale = ${{ vars.TF_VAR_SMTPIN_SCALE }}" >> terraform.tfvars
        echo "chef_license = \"${{ vars.TF_VAR_CHEF_LICENSE}}\"" >> terraform.tfvars
        echo "repo = \"${{ vars.TF_VAR_REPO }}\"" >> terraform.tfvars
        echo "backup = ${{ vars.TF_VAR_BACKUP }}" >> terraform.tfvars
    - name: init-terraform
      run: terraform init
    - name: plan-terraform
      run: |
        terraform plan -lock-timeout=30m -detailed-exitcode
        echo "exit_code=$?" >> "$GITHUB_OUTPUT"
        
  apply:
    if: needs.steps.plan.outputs.exit_code == "2"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/infra
    environment: ${{ github.ref_name == 'main' && 'prod' || ( github.ref_name == 'stage' && 'stage' || 'development' ) }}
    needs:
    - plan
    env:
      TF_API_TOKEN: ${{ secrets.TF_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: retrieve-artifact
      uses: actions/download-artifact@v3
      with:
        name: versions.tf
    - name: move
      run: mv ../../versions.tf versions.tf
    - name: install-terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
    - name: tfvars-terraform
      run: |
        echo "smtpout_scale = ${{ vars.TF_VAR_SMTPOUT_SCALE }}" > terraform.tfvars
        echo "availability_zones = ${{ vars.TF_VAR_AVAILABILITY_ZONES}}" >> terraform.tfvars
        echo "aws_region = \"${{ vars.TF_VAR_AWS_REGION}}\"" >> terraform.tfvars
        echo "cidr_block = \"${{ vars.TF_VAR_CIDR_BLOCK}}\"" >> terraform.tfvars
        echo "control_domain = \"${{ vars.TF_VAR_CONTROL_DOMAIN}}\"" >> terraform.tfvars
        echo "email = \"${{ vars.TF_VAR_EMAIL }}\"" >> terraform.tfvars
        echo "environment = \"${{ vars.TF_VAR_ENVIRONMENT }}\"" >> terraform.tfvars
        echo "imap_scale = ${{ vars.TF_VAR_IMAP_SCALE }}" >> terraform.tfvars
        echo "mail_domains = ${{ vars.TF_VAR_MAIL_DOMAINS }}" >> terraform.tfvars
        echo "smtpin_scale = ${{ vars.TF_VAR_SMTPIN_SCALE }}" >> terraform.tfvars
        echo "chef_license = \"${{ vars.TF_VAR_CHEF_LICENSE}}\"" >> terraform.tfvars
        echo "repo = \"${{ vars.TF_VAR_REPO }}\"" >> terraform.tfvars
        echo "backup = ${{ vars.TF_VAR_BACKUP }}" >> terraform.tfvars
    - name: init-terraform
      run: terraform init
    - name: apply-terraform
      run: terraform apply -auto-approve -lock-timeout=30m
